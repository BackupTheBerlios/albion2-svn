# C++ Static Library Makefile autogenerated by premake
# Don't edit this file! Instead edit `premake.lua` then rerun `make`

ifndef CONFIG
  CONFIG=Debug
endif

ifeq ($(CONFIG),Debug)
  BINDIR = ../bin
  LIBDIR = ../lib
  OBJDIR = obj/Debug
  OUTDIR = ../lib
  CPPFLAGS = -MD -I "/usr/include" -I "/usr/include/freetype2" -I "/usr/include/FTGL" -I "/usr/include/ode" -I "/usr/include/opcode" -I "/usr/include/opcode/ICE"
  CFLAGS += $(CPPFLAGS) -g `sdl-config --cflags` -Wall
  CXXFLAGS = $(CFLAGS)
  LDFLAGS += -L$(BINDIR) -L$(LIBDIR) `sdl-config --libs` -L "/usr/lib" -L "/usr/X11R6/lib" -L "/usr/X11R6/lib" -L "/usr/lib" -lGL -lGLU -lXxf86vm -lz -ljpeg -lSDL -lSDL_net -lSDL_image -lode -lOPCODE -lfreetype -lftgl -llua -llualib -lxml2
  LDDEPS =
  TARGET = liba2e.a
endif

ifeq ($(CONFIG),Release)
  BINDIR = ../bin
  LIBDIR = ../lib
  OBJDIR = obj/Release
  OUTDIR = ../lib
  CPPFLAGS = -MD -I "/usr/include" -I "/usr/include/freetype2" -I "/usr/include/FTGL" -I "/usr/include/ode" -I "/usr/include/opcode" -I "/usr/include/opcode/ICE"
  CFLAGS += $(CPPFLAGS) -O2 `sdl-config --cflags` -Wall
  CXXFLAGS = $(CFLAGS)
  LDFLAGS += -L$(BINDIR) -L$(LIBDIR) -s `sdl-config --libs` -L "/usr/lib" -L "/usr/X11R6/lib" -L "/usr/X11R6/lib" -L "/usr/lib" -lGL -lGLU -lXxf86vm -lz -ljpeg -lSDL -lSDL_net -lSDL_image -lode -lOPCODE -lfreetype -lftgl -llua -llualib -lxml2
  LDDEPS =
  TARGET = liba2e.a
endif

OBJECTS = \
	$(OBJDIR)/a2eanim.o \
	$(OBJDIR)/a2ematerial.o \
	$(OBJDIR)/a2emodel.o \
	$(OBJDIR)/camera.o \
	$(OBJDIR)/core.o \
	$(OBJDIR)/engine.o \
	$(OBJDIR)/event.o \
	$(OBJDIR)/extensions.o \
	$(OBJDIR)/file_io.o \
	$(OBJDIR)/gfx.o \
	$(OBJDIR)/gui.o \
	$(OBJDIR)/gui_button.o \
	$(OBJDIR)/gui_check.o \
	$(OBJDIR)/gui_font.o \
	$(OBJDIR)/gui_input.o \
	$(OBJDIR)/gui_list.o \
	$(OBJDIR)/gui_list_item.o \
	$(OBJDIR)/gui_style.o \
	$(OBJDIR)/gui_text.o \
	$(OBJDIR)/gui_vbar.o \
	$(OBJDIR)/gui_window.o \
	$(OBJDIR)/image.o \
	$(OBJDIR)/light.o \
	$(OBJDIR)/line3.o \
	$(OBJDIR)/lua.o \
	$(OBJDIR)/msg.o \
	$(OBJDIR)/net.o \
	$(OBJDIR)/ode.o \
	$(OBJDIR)/ode_object.o \
	$(OBJDIR)/quaternion.o \
	$(OBJDIR)/scene.o \
	$(OBJDIR)/shader.o \
	$(OBJDIR)/texman.o \
	$(OBJDIR)/vertex3.o \
	$(OBJDIR)/xml.o \

.PHONY: clean

$(OUTDIR)/$(TARGET): $(OBJECTS) $(LDDEPS)
	@echo Linking a2e
	-@if [ ! -d $(BINDIR) ]; then mkdir -p $(BINDIR); fi
	-@if [ ! -d $(LIBDIR) ]; then mkdir -p $(LIBDIR); fi
	-@if [ ! -d $(OUTDIR) ]; then mkdir -p $(OUTDIR); fi
	@ar -cr $@ $^
	@ranlib $@

clean:
	@echo Cleaning a2e
	-@rm -rf $(OUTDIR)/$(TARGET) $(OBJDIR)

$(OBJDIR)/a2eanim.o: a2eanim.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/a2ematerial.o: a2ematerial.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/a2emodel.o: a2emodel.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/camera.o: camera.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/core.o: core.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/engine.o: engine.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/event.o: event.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/extensions.o: extensions.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/file_io.o: file_io.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gfx.o: gfx.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui.o: gui.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_button.o: gui_button.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_check.o: gui_check.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_font.o: gui_font.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_input.o: gui_input.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_list.o: gui_list.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_list_item.o: gui_list_item.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_style.o: gui_style.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_text.o: gui_text.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_vbar.o: gui_vbar.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/gui_window.o: gui_window.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/image.o: image.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/light.o: light.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/line3.o: line3.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/lua.o: lua.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/msg.o: msg.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/net.o: net.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/ode.o: ode.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/ode_object.o: ode_object.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/quaternion.o: quaternion.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/scene.o: scene.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/shader.o: shader.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/texman.o: texman.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/vertex3.o: vertex3.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OBJDIR)/xml.o: xml.cpp
	-@if [ ! -d $(OBJDIR) ]; then mkdir -p $(OBJDIR); fi
	@echo $(notdir $<)
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

-include $(OBJECTS:%.o=%.d)

